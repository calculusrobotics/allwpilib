ext {
    nativeName = 'wpilibStateSpace'
    devMain = 'edu.wpi.first.wpilibj.wpilibStateSpace.DevMain'
}

apply from: "${rootDir}/shared/jni/setupBuild.gradle"

dependencies {
    implementation project(':wpiutil')
    implementation project(':ntcore')
    implementation project(':cscore')
    implementation project(':hal')
    implementation project(':wpilibj')
    implementation project(':wpilibc')
    devImplementation project(':wpiutil')
    devImplementation project(':ntcore')
    devImplementation project(':cscore')
    devImplementation project(':hal')
    devImplementation project(':wpilibj')
    implementation project(':wpilibc')
}

nativeUtils.exportsConfigs {
    wpilibStateSpace {
        x86ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                            '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                            '_TI5?AVfailure', '_CT??_R0?AVout_of_range', '_CTA3?AVout_of_range',
                            '_TI3?AVout_of_range', '_CT??_R0?AVbad_cast']
        x64ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                            '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                            '_TI5?AVfailure', '_CT??_R0?AVout_of_range', '_CTA3?AVout_of_range',
                            '_TI3?AVout_of_range', '_CT??_R0?AVbad_cast']
    }
    wpilibStateSpaceJNI {
        x86SymbolFilter = { symbols ->
            symbols.removeIf({ !it.startsWith('NT_') })
        }
        x64SymbolFilter = { symbols ->
            symbols.removeIf({ !it.startsWith('NT_') })
        }
    }
}

if (!project.hasProperty('skipPMD')) {
    pmdMain {
        pmdMain.enabled = false
    }
}


// evaluationDependsOn(':ntcore')
// evaluationDependsOn(':hal')
// evaluationDependsOn(':wpilibc')
// evaluationDependsOn(':cameraserver')
// evaluationDependsOn(':wpilibj')

// apply from: "${rootDir}/shared/javacpp/setupBuild.gradle"
// apply from: "${rootDir}/shared/jni/setupBuild.gradle"

// dependencies {
//     implementation project(':wpiutil')
//     implementation project(':ntcore')
//     implementation project(':cscore')
//     implementation project(':hal')
//     implementation project(':wpilibj')
//     devImplementation project(':wpiutil')
//     devImplementation project(':ntcore')
//     devImplementation project(':cscore')
//     devImplementation project(':hal')
//     devImplementation project(':wpilibj')
// }

// nativeUtils.exportsConfigs {
//     wpilibStateSpace {
//         x86ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
//                             '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
//                             '_TI5?AVfailure', '_CT??_R0?AVout_of_range', '_CTA3?AVout_of_range',
//                             '_TI3?AVout_of_range', '_CT??_R0?AVbad_cast']
//         x64ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
//                             '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
//                             '_TI5?AVfailure', '_CT??_R0?AVout_of_range', '_CTA3?AVout_of_range',
//                             '_TI3?AVout_of_range', '_CT??_R0?AVbad_cast']
//     }
//     wpilibStateSpaceJNI {
//         x86SymbolFilter = { symbols ->
//             symbols.removeIf({ !it.startsWith('NT_') })
//         }
//         x64SymbolFilter = { symbols ->
//             symbols.removeIf({ !it.startsWith('NT_') })
//         }
//     }
// }

// apply plugin: DisableBuildingGTest
// // apply plugin: 'edu.wpi.first.GradleJni' version '0.10.1'

// nativeUtils.addWpiNativeUtils()
// nativeUtils.withRoboRIO()


// model {
//     components {
//         WPILibStateSpace(NativeLibrarySpec) {
//             sources {
//                 cpp {
//                     source {
//                         srcDirs 'src/main/native/cpp'
//                         include '**/*.cpp'
//                     }
//                     exportedHeaders {
//                         srcDirs 'src/main/native/include'
//                     }
//                 }
//             }
//             binaries.all {
//                 lib library: 'WPILibStateSpaceDriver', linkage: 'shared'
//             }
//             nativeUtils.useRequiredLibrary(it, 'wpilib_shared')
//         }
//         WPILibStateSpaceDriver(JniNativeLibrarySpec) {
//             enableCheckTask true
//             javaCompileTasks << compileJava
//             jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.roborio)
//             // Leave these for future proofing
//             jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.raspbian)
//             jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.aarch64bionic)
//             sources {
//                 cpp {
//                 source {
//                     srcDirs 'src/main/driver/cpp'
//                     include '**/*.cpp'
//                 }
//                 exportedHeaders {
//                     srcDirs 'src/main/driver/include'
//                 }
//                 }
//             }

//             nativeUtils.useRequiredLibrary(it, "driver_shared")
//         }
//     }

//     binaries {
//         all {
//             if (!it.buildable || !(it instanceof NativeBinarySpec)) {
//                 return
//             }
//             lib project: ':wpilibc', library: 'wpilibc', linkage: 'shared'
//             lib project: ':ntcore', library: 'ntcore', linkage: 'shared'
//             project(':hal').addHalDependency(it, 'shared')
//             lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'

//             if (it.component.name == "${nativeName}Dev") {
//               lib project: ':ntcore', library: 'ntcoreJNIShared', linkage: 'shared'
//               project(':hal').addHalJniDependency(it)
//             }

//             if (it instanceof GoogleTestTestSuiteBinarySpec) {
//                 nativeUtils.useRequiredLibrary(it, 'opencv_shared')
//                 lib project: ':cscore', library: 'cscore', linkage: 'shared'
//             }
//             if ((it instanceof NativeExecutableBinarySpec || it instanceof GoogleTestTestSuiteBinarySpec) && it.targetPlatform.name == nativeUtils.wpi.platforms.roborio) {
//                 nativeUtils.useRequiredLibrary(it, 'netcomm_shared', 'chipobject_shared', 'visa_shared', 'ni_runtime_shared')
//             }
//         }
//     }
//     tasks {
//         def c = $.components
//         def found = false
//         def systemArch = getCurrentArch()
//         c.each {
//             if (it in NativeExecutableSpec && it.name == "${nativeName}Dev") {
//                 it.binaries.each {
//                     if (!found) {
//                         def arch = it.targetPlatform.name
//                         if (arch == systemArch) {
//                             def filePath = it.tasks.install.installDirectory.get().toString() + File.separatorChar + 'lib'

//                             found = true
//                         }
//                     }
//                 }
//             }
//         }
//     }
// }

// test {
//     testLogging {
//         outputs.upToDateWhen {false}
//         showStandardStreams = true
//     }
// }

// if (!project.hasProperty('skipPMD')) {
//     pmdMain {
//         pmdMain.enabled = false
//     }
// }